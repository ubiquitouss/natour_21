/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

*,*::before,*::after {
  /* ! before and after means before the element and after the element */
  /* ! the contents in the 'before' come before the element */
  /* ! the contents in the 'after' come after the element */
  /* ! but it doesn't work the image content. image it self is the content */
  /* ! don't put pseudo elements on image */
  margin: 0;
  padding: 0;
  box-sizing: inherit;
  /* !this inherit key word we are using because we want our page to use other box sizing but inherit from here */
  /* in case you don't know what is this see youtube video */
  /* this actually stops to take  extra spaces when giving content a padding, or margin */
  /*this is just good to use here*/
}


/* here we will work on rem */
html{
  /* we fixed here the font-size */
  /* ! because now we can use rem unit and we don't have to do complex calculations */
  /* font-size: 10px; */
  /* ! but now the user won't be able to zoom in the browser */
  /* ! so it's better to use something relative */
  /* instead of using px always use this font-size to % */
  /* font-size: 100%; */
  /* but this will be defailt 16px but we want 10px here*/
  /* so what we have to do is 10/16=.625 */
  font-size: 62.5%;
  /* before designing a page always use this font-size */
  /* ! now later on the rem unit will be easier to use */
}

body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  line-height: 1.7;
  /* the space between two lines */
  color: #777;
  padding: 3rem;
  /* we could use rem because we fixed the value in px at html>font-size */
  box-sizing: border-box;
}
.header {
  height: 95vh;
  background-image: linear-gradient(to right bottom, rgba(126,213,111,0.8),rgba(40,180,131,0.8)),url(../img/hero.jpg);
  background-size: cover;
  background-position: top;
  clip-path: polygon(0 0, 100% 0, 100% 75%, 0 100%);
  position: relative;
  /* this is the parent element. that's why we are using relative. */
  /* all other elements here will be moved relatively with this section */
}
.text {
  background-color: green;
}
.header__logo-box{
  position: absolute;
  top: 4rem;
  left: 4rem;
  /* the parent element is header */
  /* header element is relative and 'logo-box' here is absolute */
  /* the parent element.header is relative */
}
.header__logo{
  height: 3.5rem;
  /* the height is set and the width will be fixed automatically with the browser */
}

.header__text-box{
  position: absolute;
  top: 30%;
  left:50%;
  transform: translate(-50%,-50%);
  /*! look at this section closely  */
  /* ! this is the section where the texts and button in the text box goes just at the middle */
  /*! this is the parent for the header-text and the  button */
  /*! position, top,left, transoform have been chosen to move text and the button at the middle automatically  */
  /* ! first it goes top 50% and left 50% then content itself cuts the 50% and stays at the middle automatically */
/* first the top was 50% . but we don't want it exactly at the middle, we want it a little bit upper */
/* that's why we have set it to 30% later*/
  text-align: center;
  /* the button is just text. we are using this line to keep the button at the center */
}

.heading-primary {
  color:#fff;
  text-transform: uppercase;
}

.heading-primary--main {
  display: block;
  font-size: 6rem;
  font-weight: 400;
  letter-spacing: 3.5rem;
  /* animation-name: moveInLeft;
  animation-duration: 1s;
  animation-timing-function: ease-out; */
  animation: moveInLeft 1s ease-out;
  /* animation-delay: 3s; */
  backface-visibility: hidden;
  /* ! removes the shaking of the animation */
  
}

.heading-primary--sub{
  display: block;
  font-size: 2rem;
  font-weight: 700;
  letter-spacing: 1.75rem;
  /* animation-name: moveInRight;
  animation-duration: 1s;
  animation-timing-function: ease-out; */
  animation: moveInRight 1s ease-out;
  margin-bottom: 6rem;
}

@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem);
  }
  80%{
    transform: translateX(1rem);
  }
  100%{
    opacity: 1;
    transform: translate(0);
  }
}

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem);
  }
  80%{
    transform: translateX(-1rem);
  }
  100%{
    opacity: 1;
    transform: translate(0);
  }
}

/* ? this animation is for the button to move upper */
/* ! for button */
@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem);
  }
  100%{
    opacity: 1;
    transform: translate(0);
  }
}

.btn:link,.btn:visited{
  text-transform: uppercase;
  text-decoration: none;
  padding: 1.5rem 4rem;
  display: inline-block;
  /* so that the button takes it's own space when it's about padding or something like that */
  border-radius: 10rem;
  transition: all, .2s;
  position: relative;
  /* we are setting this to relative becasue of the animation that flashes the button */
  /* the absolute section for this is .btn::after; */
  font-size: 1.6rem;
}
.btn:hover{
  transform: translateY(-3px);
  box-shadow: 0 1rem 2rem rgba(0,0,0,0.2);
  /* shadow-format */
  /* box-shadow: x y blur rgba */
}
.btn:active{
  transform: translateY(-1px);
  /* it's not related with the hover state this property is related to the initial state */
  box-shadow: 0 .5px 1rem rgba(0,0,0,0.2);
  /* we decreased the value of box-shadow, because we want the  button look more closer to the webpage; */
}
/* when we click a button it's called the activve state */
.btn--white{
  background-color: #fff;
  color: #777;
}



/*! this section is for the animation effect for the button */
/* the button gets bigger and flashes .. (that effect) */
.btn::after{
  /* this whole element will be exactly like the .btn element */
  content: "";
  /* we have to specify this 'content' for the btn::after effect . otherwise the button won't work*/
  display: inline-block;
  /* the button itself is the inline block thats why this is inline-block too */
  height: 100%;
  width: 100%;
  /* we are setting this 100% because this is working like the child element of the btn. */
  /* this stays behind  the button */
  /* this is 100% height and the width of the .btn */
  border-radius: 10rem;

  /* now we need to put the element back to the main button */
  position: absolute;
  /* if its an absolute we need an relativve parent */
  top:0;
  left: 0;
  z-index: -1;
  /* to put it behind the button */

  transition: all .4s;
}
.btn--white::after{
  background-color: #fff;
}
.btn:hover::after{
  transform: scaleX(1.4) scaleY(1.6);
  opacity: 0;
  /* this is the trick to fadde it out in the animation */
}
.btn--animated{
  animation: moveInBottom .5s ease-out .75s;
  /* last value is animation-delay: ; */
  animation-fill-mode: backwards;
  /* this solves the timing that the animation starts after the text animation */
}